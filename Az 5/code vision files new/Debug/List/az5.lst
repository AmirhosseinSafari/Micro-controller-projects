
AVRASM ver. 2.1.30  D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm Mon Dec 27 17:41:30 2021

D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _A=R4
                 	.DEF _A_msb=R5
                 	.DEF _B=R6
                 	.DEF _B_msb=R7
                 	.DEF _C=R8
                 	.DEF _C_msb=R9
                 	.DEF _operater=R10
                 	.DEF _operater_msb=R11
                 	.DEF _result=R12
                 	.DEF _result_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 002d
00002b 002b
00002c 003d      	.DB  0x2D,0x0,0x2B,0x0,0x3D,0x0
                 _0x2000060:
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1131): warning: .cseg .db misalignment - padding zero byte
00002d 0001      	.DB  0x1
                 _0x2000000:
00002e 4e2d
00002f 4e41
000030 4900
000031 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Uni\7\Az micro\Az 5\code vision files new\Debug\List\az5.asm(1134): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x0
                 _0x2020003:
000033 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000034 0002      	.DW  0x02
000035 0260      	.DW  _0x31
000036 0054      	.DW  _0x0*2
                 
000037 0002      	.DW  0x02
000038 0262      	.DW  _0x31+2
000039 0056      	.DW  _0x0*2+2
                 
00003a 0002      	.DW  0x02
00003b 0264      	.DW  _0x31+4
00003c 0058      	.DW  _0x0*2+4
                 
00003d 0001      	.DW  0x01
00003e 026a      	.DW  __seed_G100
00003f 005a      	.DW  _0x2000060*2
                 
000040 0002      	.DW  0x02
000041 026e      	.DW  __base_y_G101
000042 0066      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 0081 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 12/10/2021
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int A;
                 ;int B;
                 ;int C;
                 ;char nums[];
                 ;int operater;
                 ;char results[];
                 ;int result;
                 ;int counter = 0;
                 ;
                 ;void num_printer(int var){
                 ; 0000 0029 void num_printer(int var){
                 
                 	.CSEG
                 _num_printer:
                 ; .FSTART _num_printer
                 ; 0000 002A     itoa(var, nums);
000071 93ba      	ST   -Y,R27
000072 93aa      	ST   -Y,R26
                 ;	var -> Y+0
000073 81e8      	LD   R30,Y
000074 81f9      	LDD  R31,Y+1
000075 93fa      	ST   -Y,R31
000076 93ea      	ST   -Y,R30
000077 e6a6      	LDI  R26,LOW(_nums)
000078 e0b2      	LDI  R27,HIGH(_nums)
000079 940e 0266 	CALL _itoa
                 ; 0000 002B     lcd_puts(nums);
00007b e6a6      	LDI  R26,LOW(_nums)
00007c e0b2      	LDI  R27,HIGH(_nums)
00007d 940e 0332 	CALL SUBOPT_0x0
                 ; 0000 002C     delay_ms(1000);
                 ; 0000 002D     counter += 2;
                 ; 0000 002E     lcd_gotoxy(counter,0);
                 ; 0000 002F }
00007f 940c 02c3 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033 // Declare your local variables here
                 ; 0000 0034 
                 ; 0000 0035 // Input/Output Ports initialization
                 ; 0000 0036 // Port A initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000081 e0e0      	LDI  R30,LOW(0)
000082 bbea      	OUT  0x1A,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000083 bbeb      	OUT  0x1B,R30
                 ; 0000 003B 
                 ; 0000 003C // Port B initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000084 bbe7      	OUT  0x17,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000085 bbe8      	OUT  0x18,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port C initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000086 bbe4      	OUT  0x14,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000087 bbe5      	OUT  0x15,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port D initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000088 bbe1      	OUT  0x11,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000089 bbe2      	OUT  0x12,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer/Counter 0 initialization
                 ; 0000 004F // Clock source: System Clock
                 ; 0000 0050 // Clock value: Timer 0 Stopped
                 ; 0000 0051 // Mode: Normal top=0xFF
                 ; 0000 0052 // OC0 output: Disconnected
                 ; 0000 0053 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008a bfe3      	OUT  0x33,R30
                 ; 0000 0054 TCNT0=0x00;
00008b bfe2      	OUT  0x32,R30
                 ; 0000 0055 OCR0=0x00;
00008c bfec      	OUT  0x3C,R30
                 ; 0000 0056 
                 ; 0000 0057 // Timer/Counter 1 initialization
                 ; 0000 0058 // Clock source: System Clock
                 ; 0000 0059 // Clock value: Timer1 Stopped
                 ; 0000 005A // Mode: Normal top=0xFFFF
                 ; 0000 005B // OC1A output: Disconnected
                 ; 0000 005C // OC1B output: Disconnected
                 ; 0000 005D // Noise Canceler: Off
                 ; 0000 005E // Input Capture on Falling Edge
                 ; 0000 005F // Timer1 Overflow Interrupt: Off
                 ; 0000 0060 // Input Capture Interrupt: Off
                 ; 0000 0061 // Compare A Match Interrupt: Off
                 ; 0000 0062 // Compare B Match Interrupt: Off
                 ; 0000 0063 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00008d bdef      	OUT  0x2F,R30
                 ; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00008e bdee      	OUT  0x2E,R30
                 ; 0000 0065 TCNT1H=0x00;
00008f bded      	OUT  0x2D,R30
                 ; 0000 0066 TCNT1L=0x00;
000090 bdec      	OUT  0x2C,R30
                 ; 0000 0067 ICR1H=0x00;
000091 bde7      	OUT  0x27,R30
                 ; 0000 0068 ICR1L=0x00;
000092 bde6      	OUT  0x26,R30
                 ; 0000 0069 OCR1AH=0x00;
000093 bdeb      	OUT  0x2B,R30
                 ; 0000 006A OCR1AL=0x00;
000094 bdea      	OUT  0x2A,R30
                 ; 0000 006B OCR1BH=0x00;
000095 bde9      	OUT  0x29,R30
                 ; 0000 006C OCR1BL=0x00;
000096 bde8      	OUT  0x28,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 2 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer2 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFF
                 ; 0000 0072 // OC2 output: Disconnected
                 ; 0000 0073 ASSR=0<<AS2;
000097 bde2      	OUT  0x22,R30
                 ; 0000 0074 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000098 bde5      	OUT  0x25,R30
                 ; 0000 0075 TCNT2=0x00;
000099 bde4      	OUT  0x24,R30
                 ; 0000 0076 OCR2=0x00;
00009a bde3      	OUT  0x23,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0079 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00009b bfe9      	OUT  0x39,R30
                 ; 0000 007A 
                 ; 0000 007B // External Interrupt(s) initialization
                 ; 0000 007C // INT0: Off
                 ; 0000 007D // INT1: Off
                 ; 0000 007E // INT2: Off
                 ; 0000 007F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00009c bfe5      	OUT  0x35,R30
                 ; 0000 0080 MCUCSR=(0<<ISC2);
00009d bfe4      	OUT  0x34,R30
                 ; 0000 0081 
                 ; 0000 0082 // USART initialization
                 ; 0000 0083 // USART disabled
                 ; 0000 0084 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00009e b9ea      	OUT  0xA,R30
                 ; 0000 0085 
                 ; 0000 0086 // Analog Comparator initialization
                 ; 0000 0087 // Analog Comparator: Off
                 ; 0000 0088 // The Analog Comparator's positive input is
                 ; 0000 0089 // connected to the AIN0 pin
                 ; 0000 008A // The Analog Comparator's negative input is
                 ; 0000 008B // connected to the AIN1 pin
                 ; 0000 008C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00009f e8e0      	LDI  R30,LOW(128)
0000a0 b9e8      	OUT  0x8,R30
                 ; 0000 008D SFIOR=(0<<ACME);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bfe0      	OUT  0x30,R30
                 ; 0000 008E 
                 ; 0000 008F // ADC initialization
                 ; 0000 0090 // ADC disabled
                 ; 0000 0091 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a3 b9e6      	OUT  0x6,R30
                 ; 0000 0092 
                 ; 0000 0093 // SPI initialization
                 ; 0000 0094 // SPI disabled
                 ; 0000 0095 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a4 b9ed      	OUT  0xD,R30
                 ; 0000 0096 
                 ; 0000 0097 // TWI initialization
                 ; 0000 0098 // TWI disabled
                 ; 0000 0099 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a5 bfe6      	OUT  0x36,R30
                 ; 0000 009A 
                 ; 0000 009B // Alphanumeric LCD initialization
                 ; 0000 009C // Connections are specified in the
                 ; 0000 009D // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 009E // RS - PORTC Bit 0
                 ; 0000 009F // RD - PORTC Bit 1
                 ; 0000 00A0 // EN - PORTC Bit 2
                 ; 0000 00A1 // D4 - PORTC Bit 4
                 ; 0000 00A2 // D5 - PORTC Bit 5
                 ; 0000 00A3 // D6 - PORTC Bit 6
                 ; 0000 00A4 // D7 - PORTC Bit 7
                 ; 0000 00A5 // Characters/line: 8
                 ; 0000 00A6 lcd_init(16);
0000a6 e1a0      	LDI  R26,LOW(16)
0000a7 940e 0304 	CALL _lcd_init
                 ; 0000 00A7 lcd_clear();
0000a9 940e 02c5 	CALL _lcd_clear
                 ; 0000 00A8 lcd_gotoxy(0,0);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac 940e 0347 	CALL SUBOPT_0x1
                 ; 0000 00A9 
                 ; 0000 00AA DDRB = 0x00;
0000ae e0e0      	LDI  R30,LOW(0)
0000af bbe7      	OUT  0x17,R30
                 ; 0000 00AB DDRA = 0b00001111;
0000b0 e0ef      	LDI  R30,LOW(15)
0000b1 bbea      	OUT  0x1A,R30
                 ; 0000 00AC 
                 ; 0000 00AD A = -1;
0000b2 efef      	LDI  R30,LOW(65535)
0000b3 efff      	LDI  R31,HIGH(65535)
0000b4 012f      	MOVW R4,R30
                 ; 0000 00AE B = -1;
0000b5 013f      	MOVW R6,R30
                 ; 0000 00AF C = -1;
0000b6 014f      	MOVW R8,R30
                 ; 0000 00B0 result = 0;
0000b7 24cc      	CLR  R12
0000b8 24dd      	CLR  R13
                 ; 0000 00B1 operater = 1; // operater = 1 ==> + | operater = 0 ==> -
0000b9 e0e1      	LDI  R30,LOW(1)
0000ba e0f0      	LDI  R31,HIGH(1)
0000bb 015f      	MOVW R10,R30
                 ; 0000 00B2 
                 ; 0000 00B3 while (1)
                 _0x3:
                 ; 0000 00B4       {
                 ; 0000 00B5       // Place your code here
                 ; 0000 00B6       //Line 1
                 ; 0000 00B7       PORTA = 0b00000001;
0000bc e0e1      	LDI  R30,LOW(1)
0000bd bbeb      	OUT  0x1B,R30
                 ; 0000 00B8       if(PINB.1 == 1){
0000be 9bb1      	SBIS 0x16,1
0000bf c01b      	RJMP _0x6
                 ; 0000 00B9         if(A == -1) {A = 9; num_printer(A); }
0000c0 940e 034b 	CALL SUBOPT_0x2
0000c2 f429      	BRNE _0x7
0000c3 e0e9      	LDI  R30,LOW(9)
0000c4 e0f0      	LDI  R31,HIGH(9)
0000c5 012f      	MOVW R4,R30
0000c6 01d2      	MOVW R26,R4
0000c7 c012      	RJMP _0x5B
                 ; 0000 00BA         else if(B == -1){ B = 9; num_printer(B); }
                 _0x7:
0000c8 940e 0350 	CALL SUBOPT_0x3
0000ca f429      	BRNE _0x9
0000cb e0e9      	LDI  R30,LOW(9)
0000cc e0f0      	LDI  R31,HIGH(9)
0000cd 013f      	MOVW R6,R30
0000ce 01d3      	MOVW R26,R6
0000cf c00a      	RJMP _0x5B
                 ; 0000 00BB         else if(C == -1){ C = 9; num_printer(C); }
                 _0x9:
0000d0 940e 0355 	CALL SUBOPT_0x4
0000d2 f429      	BRNE _0xB
0000d3 e0e9      	LDI  R30,LOW(9)
0000d4 e0f0      	LDI  R31,HIGH(9)
0000d5 014f      	MOVW R8,R30
0000d6 01d4      	MOVW R26,R8
0000d7 c002      	RJMP _0x5B
                 ; 0000 00BC         else{ num_printer(9); }
                 _0xB:
0000d8 e0a9      	LDI  R26,LOW(9)
0000d9 e0b0      	LDI  R27,0
                 _0x5B:
0000da df96      	RCALL _num_printer
                 ; 0000 00BD       }
                 ; 0000 00BE       delay_ms(10);
                 _0x6:
0000db 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00BF 
                 ; 0000 00C0       if(PINB.2 == 1){
0000dd 9bb2      	SBIS 0x16,2
0000de c01b      	RJMP _0xD
                 ; 0000 00C1         if(A == -1) {A = 8; num_printer(A); }
0000df 940e 034b 	CALL SUBOPT_0x2
0000e1 f429      	BRNE _0xE
0000e2 e0e8      	LDI  R30,LOW(8)
0000e3 e0f0      	LDI  R31,HIGH(8)
0000e4 012f      	MOVW R4,R30
0000e5 01d2      	MOVW R26,R4
0000e6 c012      	RJMP _0x5C
                 ; 0000 00C2         else if(B == -1){ B = 8; num_printer(B); }
                 _0xE:
0000e7 940e 0350 	CALL SUBOPT_0x3
0000e9 f429      	BRNE _0x10
0000ea e0e8      	LDI  R30,LOW(8)
0000eb e0f0      	LDI  R31,HIGH(8)
0000ec 013f      	MOVW R6,R30
0000ed 01d3      	MOVW R26,R6
0000ee c00a      	RJMP _0x5C
                 ; 0000 00C3         else if(C == -1){ C = 8; num_printer(C); }
                 _0x10:
0000ef 940e 0355 	CALL SUBOPT_0x4
0000f1 f429      	BRNE _0x12
0000f2 e0e8      	LDI  R30,LOW(8)
0000f3 e0f0      	LDI  R31,HIGH(8)
0000f4 014f      	MOVW R8,R30
0000f5 01d4      	MOVW R26,R8
0000f6 c002      	RJMP _0x5C
                 ; 0000 00C4         else{ num_printer(8); }
                 _0x12:
0000f7 e0a8      	LDI  R26,LOW(8)
0000f8 e0b0      	LDI  R27,0
                 _0x5C:
0000f9 df77      	RCALL _num_printer
                 ; 0000 00C5       }
                 ; 0000 00C6       delay_ms(10);
                 _0xD:
0000fa 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00C7 
                 ; 0000 00C8       if(PINB.3 == 1){
0000fc 9bb3      	SBIS 0x16,3
0000fd c01b      	RJMP _0x14
                 ; 0000 00C9         if(A == -1) {A = 7; num_printer(A); }
0000fe 940e 034b 	CALL SUBOPT_0x2
000100 f429      	BRNE _0x15
000101 e0e7      	LDI  R30,LOW(7)
000102 e0f0      	LDI  R31,HIGH(7)
000103 012f      	MOVW R4,R30
000104 01d2      	MOVW R26,R4
000105 c012      	RJMP _0x5D
                 ; 0000 00CA         else if(B == -1){ B = 7; num_printer(B); }
                 _0x15:
000106 940e 0350 	CALL SUBOPT_0x3
000108 f429      	BRNE _0x17
000109 e0e7      	LDI  R30,LOW(7)
00010a e0f0      	LDI  R31,HIGH(7)
00010b 013f      	MOVW R6,R30
00010c 01d3      	MOVW R26,R6
00010d c00a      	RJMP _0x5D
                 ; 0000 00CB         else if(C == -1){ C = 7; num_printer(C); }
                 _0x17:
00010e 940e 0355 	CALL SUBOPT_0x4
000110 f429      	BRNE _0x19
000111 e0e7      	LDI  R30,LOW(7)
000112 e0f0      	LDI  R31,HIGH(7)
000113 014f      	MOVW R8,R30
000114 01d4      	MOVW R26,R8
000115 c002      	RJMP _0x5D
                 ; 0000 00CC         else{ num_printer(7); }
                 _0x19:
000116 e0a7      	LDI  R26,LOW(7)
000117 e0b0      	LDI  R27,0
                 _0x5D:
000118 df58      	RCALL _num_printer
                 ; 0000 00CD       }
                 ; 0000 00CE       delay_ms(10);
                 _0x14:
000119 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00CF 
                 ; 0000 00D0       //Line 2
                 ; 0000 00D1       PORTA = 0b00000010;
00011b e0e2      	LDI  R30,LOW(2)
00011c bbeb      	OUT  0x1B,R30
                 ; 0000 00D2       if(PINB.1 == 1){
00011d 9bb1      	SBIS 0x16,1
00011e c01b      	RJMP _0x1B
                 ; 0000 00D3         if(A == -1) {A = 6; num_printer(A); }
00011f 940e 034b 	CALL SUBOPT_0x2
000121 f429      	BRNE _0x1C
000122 e0e6      	LDI  R30,LOW(6)
000123 e0f0      	LDI  R31,HIGH(6)
000124 012f      	MOVW R4,R30
000125 01d2      	MOVW R26,R4
000126 c012      	RJMP _0x5E
                 ; 0000 00D4         else if(B == -1){ B = 6; num_printer(B); }
                 _0x1C:
000127 940e 0350 	CALL SUBOPT_0x3
000129 f429      	BRNE _0x1E
00012a e0e6      	LDI  R30,LOW(6)
00012b e0f0      	LDI  R31,HIGH(6)
00012c 013f      	MOVW R6,R30
00012d 01d3      	MOVW R26,R6
00012e c00a      	RJMP _0x5E
                 ; 0000 00D5         else if(C == -1){ C = 6; num_printer(C); }
                 _0x1E:
00012f 940e 0355 	CALL SUBOPT_0x4
000131 f429      	BRNE _0x20
000132 e0e6      	LDI  R30,LOW(6)
000133 e0f0      	LDI  R31,HIGH(6)
000134 014f      	MOVW R8,R30
000135 01d4      	MOVW R26,R8
000136 c002      	RJMP _0x5E
                 ; 0000 00D6         else{ num_printer(6); }
                 _0x20:
000137 e0a6      	LDI  R26,LOW(6)
000138 e0b0      	LDI  R27,0
                 _0x5E:
000139 df37      	RCALL _num_printer
                 ; 0000 00D7       }
                 ; 0000 00D8       delay_ms(10);
                 _0x1B:
00013a 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00D9 
                 ; 0000 00DA       if(PINB.2 == 1){
00013c 9bb2      	SBIS 0x16,2
00013d c01b      	RJMP _0x22
                 ; 0000 00DB         if(A == -1) {A = 5; num_printer(A); }
00013e 940e 034b 	CALL SUBOPT_0x2
000140 f429      	BRNE _0x23
000141 e0e5      	LDI  R30,LOW(5)
000142 e0f0      	LDI  R31,HIGH(5)
000143 012f      	MOVW R4,R30
000144 01d2      	MOVW R26,R4
000145 c012      	RJMP _0x5F
                 ; 0000 00DC         else if(B == -1){ B = 5; num_printer(B); }
                 _0x23:
000146 940e 0350 	CALL SUBOPT_0x3
000148 f429      	BRNE _0x25
000149 e0e5      	LDI  R30,LOW(5)
00014a e0f0      	LDI  R31,HIGH(5)
00014b 013f      	MOVW R6,R30
00014c 01d3      	MOVW R26,R6
00014d c00a      	RJMP _0x5F
                 ; 0000 00DD         else if(C == -1){ C = 5; num_printer(C); }
                 _0x25:
00014e 940e 0355 	CALL SUBOPT_0x4
000150 f429      	BRNE _0x27
000151 e0e5      	LDI  R30,LOW(5)
000152 e0f0      	LDI  R31,HIGH(5)
000153 014f      	MOVW R8,R30
000154 01d4      	MOVW R26,R8
000155 c002      	RJMP _0x5F
                 ; 0000 00DE         else{ num_printer(5); }
                 _0x27:
000156 e0a5      	LDI  R26,LOW(5)
000157 e0b0      	LDI  R27,0
                 _0x5F:
000158 df18      	RCALL _num_printer
                 ; 0000 00DF       }
                 ; 0000 00E0       delay_ms(10);
                 _0x22:
000159 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00E1 
                 ; 0000 00E2       if(PINB.3 == 1){
00015b 9bb3      	SBIS 0x16,3
00015c c01b      	RJMP _0x29
                 ; 0000 00E3         if(A == -1) {A = 4; num_printer(A); }
00015d 940e 034b 	CALL SUBOPT_0x2
00015f f429      	BRNE _0x2A
000160 e0e4      	LDI  R30,LOW(4)
000161 e0f0      	LDI  R31,HIGH(4)
000162 012f      	MOVW R4,R30
000163 01d2      	MOVW R26,R4
000164 c012      	RJMP _0x60
                 ; 0000 00E4         else if(B == -1){ B = 4; num_printer(B); }
                 _0x2A:
000165 940e 0350 	CALL SUBOPT_0x3
000167 f429      	BRNE _0x2C
000168 e0e4      	LDI  R30,LOW(4)
000169 e0f0      	LDI  R31,HIGH(4)
00016a 013f      	MOVW R6,R30
00016b 01d3      	MOVW R26,R6
00016c c00a      	RJMP _0x60
                 ; 0000 00E5         else if(C == -1){ C = 4; num_printer(C); }
                 _0x2C:
00016d 940e 0355 	CALL SUBOPT_0x4
00016f f429      	BRNE _0x2E
000170 e0e4      	LDI  R30,LOW(4)
000171 e0f0      	LDI  R31,HIGH(4)
000172 014f      	MOVW R8,R30
000173 01d4      	MOVW R26,R8
000174 c002      	RJMP _0x60
                 ; 0000 00E6         else{ num_printer(4); }
                 _0x2E:
000175 e0a4      	LDI  R26,LOW(4)
000176 e0b0      	LDI  R27,0
                 _0x60:
000177 def9      	RCALL _num_printer
                 ; 0000 00E7       }
                 ; 0000 00E8       delay_ms(10);
                 _0x29:
000178 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00E9 
                 ; 0000 00EA       //Line 3
                 ; 0000 00EB       PORTA = 0b00000100;
00017a e0e4      	LDI  R30,LOW(4)
00017b bbeb      	OUT  0x1B,R30
                 ; 0000 00EC       if(PINB.0 == 1){ operater = 0; lcd_puts("-"); delay_ms(1000); counter += 2; lcd_gotoxy(counter,0); }
00017c 9bb0      	SBIS 0x16,0
00017d c006      	RJMP _0x30
00017e 24aa      	CLR  R10
00017f 24bb      	CLR  R11
                +
000180 e6a0     +LDI R26 , LOW ( _0x31 + ( 0 ) )
000181 e0b2     +LDI R27 , HIGH ( _0x31 + ( 0 ) )
                 	__POINTW2MN _0x31,0
000182 940e 0332 	CALL SUBOPT_0x0
                 ; 0000 00ED       delay_ms(10);
                 _0x30:
000184 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00EE 
                 ; 0000 00EF       if(PINB.1 == 1){
000186 9bb1      	SBIS 0x16,1
000187 c01b      	RJMP _0x32
                 ; 0000 00F0         if(A == -1) {A = 3; num_printer(A); }
000188 940e 034b 	CALL SUBOPT_0x2
00018a f429      	BRNE _0x33
00018b e0e3      	LDI  R30,LOW(3)
00018c e0f0      	LDI  R31,HIGH(3)
00018d 012f      	MOVW R4,R30
00018e 01d2      	MOVW R26,R4
00018f c012      	RJMP _0x61
                 ; 0000 00F1         else if(B == -1){ B = 3; num_printer(B); }
                 _0x33:
000190 940e 0350 	CALL SUBOPT_0x3
000192 f429      	BRNE _0x35
000193 e0e3      	LDI  R30,LOW(3)
000194 e0f0      	LDI  R31,HIGH(3)
000195 013f      	MOVW R6,R30
000196 01d3      	MOVW R26,R6
000197 c00a      	RJMP _0x61
                 ; 0000 00F2         else if(C == -1){ C = 3; num_printer(C); }
                 _0x35:
000198 940e 0355 	CALL SUBOPT_0x4
00019a f429      	BRNE _0x37
00019b e0e3      	LDI  R30,LOW(3)
00019c e0f0      	LDI  R31,HIGH(3)
00019d 014f      	MOVW R8,R30
00019e 01d4      	MOVW R26,R8
00019f c002      	RJMP _0x61
                 ; 0000 00F3         else{ num_printer(3); }
                 _0x37:
0001a0 e0a3      	LDI  R26,LOW(3)
0001a1 e0b0      	LDI  R27,0
                 _0x61:
0001a2 dece      	RCALL _num_printer
                 ; 0000 00F4       }
                 ; 0000 00F5       delay_ms(10);
                 _0x32:
0001a3 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00F6 
                 ; 0000 00F7       if(PINB.2 == 1){
0001a5 9bb2      	SBIS 0x16,2
0001a6 c01b      	RJMP _0x39
                 ; 0000 00F8         if(A == -1) {A = 2; num_printer(A); }
0001a7 940e 034b 	CALL SUBOPT_0x2
0001a9 f429      	BRNE _0x3A
0001aa e0e2      	LDI  R30,LOW(2)
0001ab e0f0      	LDI  R31,HIGH(2)
0001ac 012f      	MOVW R4,R30
0001ad 01d2      	MOVW R26,R4
0001ae c012      	RJMP _0x62
                 ; 0000 00F9         else if(B == -1){ B = 2; num_printer(B); }
                 _0x3A:
0001af 940e 0350 	CALL SUBOPT_0x3
0001b1 f429      	BRNE _0x3C
0001b2 e0e2      	LDI  R30,LOW(2)
0001b3 e0f0      	LDI  R31,HIGH(2)
0001b4 013f      	MOVW R6,R30
0001b5 01d3      	MOVW R26,R6
0001b6 c00a      	RJMP _0x62
                 ; 0000 00FA         else if(C == -1){ C = 2; num_printer(C); }
                 _0x3C:
0001b7 940e 0355 	CALL SUBOPT_0x4
0001b9 f429      	BRNE _0x3E
0001ba e0e2      	LDI  R30,LOW(2)
0001bb e0f0      	LDI  R31,HIGH(2)
0001bc 014f      	MOVW R8,R30
0001bd 01d4      	MOVW R26,R8
0001be c002      	RJMP _0x62
                 ; 0000 00FB         else{ num_printer(2); }
                 _0x3E:
0001bf e0a2      	LDI  R26,LOW(2)
0001c0 e0b0      	LDI  R27,0
                 _0x62:
0001c1 deaf      	RCALL _num_printer
                 ; 0000 00FC       }
                 ; 0000 00FD       delay_ms(10);
                 _0x39:
0001c2 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 00FE 
                 ; 0000 00FF       if(PINB.3 == 1){
0001c4 9bb3      	SBIS 0x16,3
0001c5 c01b      	RJMP _0x40
                 ; 0000 0100         if(A == -1) {A = 1; num_printer(A); }
0001c6 940e 034b 	CALL SUBOPT_0x2
0001c8 f429      	BRNE _0x41
0001c9 e0e1      	LDI  R30,LOW(1)
0001ca e0f0      	LDI  R31,HIGH(1)
0001cb 012f      	MOVW R4,R30
0001cc 01d2      	MOVW R26,R4
0001cd c012      	RJMP _0x63
                 ; 0000 0101         else if(B == -1){ B = 1; num_printer(B); }
                 _0x41:
0001ce 940e 0350 	CALL SUBOPT_0x3
0001d0 f429      	BRNE _0x43
0001d1 e0e1      	LDI  R30,LOW(1)
0001d2 e0f0      	LDI  R31,HIGH(1)
0001d3 013f      	MOVW R6,R30
0001d4 01d3      	MOVW R26,R6
0001d5 c00a      	RJMP _0x63
                 ; 0000 0102         else if(C == -1){ C = 1; num_printer(C); }
                 _0x43:
0001d6 940e 0355 	CALL SUBOPT_0x4
0001d8 f429      	BRNE _0x45
0001d9 e0e1      	LDI  R30,LOW(1)
0001da e0f0      	LDI  R31,HIGH(1)
0001db 014f      	MOVW R8,R30
0001dc 01d4      	MOVW R26,R8
0001dd c002      	RJMP _0x63
                 ; 0000 0103         else{ num_printer(1); }
                 _0x45:
0001de e0a1      	LDI  R26,LOW(1)
0001df e0b0      	LDI  R27,0
                 _0x63:
0001e0 de90      	RCALL _num_printer
                 ; 0000 0104       }
                 ; 0000 0105       delay_ms(10);
                 _0x40:
0001e1 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 0106 
                 ; 0000 0107       //Line 4
                 ; 0000 0108       PORTA = 0b00001000;
0001e3 e0e8      	LDI  R30,LOW(8)
0001e4 bbeb      	OUT  0x1B,R30
                 ; 0000 0109       if(PINB.0 == 1){ operater = 1; lcd_puts("+"); delay_ms(1000); counter += 2; lcd_gotoxy(counter,0); }
0001e5 9bb0      	SBIS 0x16,0
0001e6 c007      	RJMP _0x47
0001e7 e0e1      	LDI  R30,LOW(1)
0001e8 e0f0      	LDI  R31,HIGH(1)
0001e9 015f      	MOVW R10,R30
                +
0001ea e6a2     +LDI R26 , LOW ( _0x31 + ( 2 ) )
0001eb e0b2     +LDI R27 , HIGH ( _0x31 + ( 2 ) )
                 	__POINTW2MN _0x31,2
0001ec 940e 0332 	CALL SUBOPT_0x0
                 ; 0000 010A       delay_ms(10);
                 _0x47:
0001ee 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 010B 
                 ; 0000 010C       if(PINB.1 == 1){
0001f0 9bb1      	SBIS 0x16,1
0001f1 c035      	RJMP _0x48
                 ; 0000 010D         lcd_puts("="); counter += 2; lcd_gotoxy(counter,0);
                +
0001f2 e6a4     +LDI R26 , LOW ( _0x31 + ( 4 ) )
0001f3 e0b2     +LDI R27 , HIGH ( _0x31 + ( 4 ) )
                 	__POINTW2MN _0x31,4
0001f4 940e 02f3 	CALL _lcd_puts
0001f6 91e0 0268 	LDS  R30,_counter
0001f8 91f0 0269 	LDS  R31,_counter+1
0001fa 9632      	ADIW R30,2
0001fb 93e0 0268 	STS  _counter,R30
0001fd 93f0 0269 	STS  _counter+1,R31
0001ff 91e0 0268 	LDS  R30,_counter
000201 940e 0347 	CALL SUBOPT_0x1
                 ; 0000 010E         //if((A == -1) && (B == -1)){ result = 0; itoa(result, results); lcd_puts(results); delay_ms(1000); counter += 2 ...
                 ; 0000 010F         //if((A == -1) || (B == -1)){ lcd_gotoxy(0,0); lcd_clear(); result = A + B + 1; itoa(result, results); lcd_puts( ...
                 ; 0000 0110 
                 ; 0000 0111         if( operater == 1 ){
000203 e0e1      	LDI  R30,LOW(1)
000204 e0f0      	LDI  R31,HIGH(1)
000205 15ea      	CP   R30,R10
000206 05fb      	CPC  R31,R11
000207 f471      	BRNE _0x49
                 ; 0000 0112             if( C == -1 ){
000208 940e 0355 	CALL SUBOPT_0x4
00020a f421      	BRNE _0x4A
                 ; 0000 0113                 result = A + B;
00020b 01f3      	MOVW R30,R6
00020c 0de4      	ADD  R30,R4
00020d 1df5      	ADC  R31,R5
00020e c004      	RJMP _0x64
                 ; 0000 0114             }
                 ; 0000 0115             else{
                 _0x4A:
                 ; 0000 0116                 result = (A * 10 + B) + C;
00020f 940e 035e 	CALL SUBOPT_0x6
000211 0de8      	ADD  R30,R8
000212 1df9      	ADC  R31,R9
                 _0x64:
000213 016f      	MOVW R12,R30
                 ; 0000 0117             }
                 ; 0000 0118 
                 ; 0000 0119             itoa(result, results);
000214 940e 0366 	CALL SUBOPT_0x7
                 ; 0000 011A             lcd_puts(results);
                 ; 0000 011B             delay_ms(1000);
                 ; 0000 011C             counter += 2;
                 ; 0000 011D             lcd_gotoxy(counter,0);}
                 ; 0000 011E 
                 ; 0000 011F 
                 ; 0000 0120          if( operater == 0 ){
                 _0x49:
000216 2c0a      	MOV  R0,R10
000217 280b      	OR   R0,R11
000218 f471      	BRNE _0x4C
                 ; 0000 0121 
                 ; 0000 0122             if( C == -1 ){
000219 940e 0355 	CALL SUBOPT_0x4
00021b f421      	BRNE _0x4D
                 ; 0000 0123                 result = A - B;
00021c 01f2      	MOVW R30,R4
00021d 19e6      	SUB  R30,R6
00021e 09f7      	SBC  R31,R7
00021f c004      	RJMP _0x65
                 ; 0000 0124             }
                 ; 0000 0125             else{
                 _0x4D:
                 ; 0000 0126                 result = (A * 10 + B) - C;
000220 940e 035e 	CALL SUBOPT_0x6
000222 19e8      	SUB  R30,R8
000223 09f9      	SBC  R31,R9
                 _0x65:
000224 016f      	MOVW R12,R30
                 ; 0000 0127             }
                 ; 0000 0128 
                 ; 0000 0129             itoa(result, results);
000225 940e 0366 	CALL SUBOPT_0x7
                 ; 0000 012A             lcd_puts(results);
                 ; 0000 012B             delay_ms(1000);
                 ; 0000 012C             counter += 2;
                 ; 0000 012D             lcd_gotoxy(counter,0);}
                 ; 0000 012E 
                 ; 0000 012F         }
                 _0x4C:
                 ; 0000 0130       delay_ms(10);
                 _0x48:
000227 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 0131 
                 ; 0000 0132       if(PINB.2 == 1){
000229 9bb2      	SBIS 0x16,2
00022a c018      	RJMP _0x4F
                 ; 0000 0133         if(A == -1) {A = 0; num_printer(A); }
00022b 940e 034b 	CALL SUBOPT_0x2
00022d f421      	BRNE _0x50
00022e 2444      	CLR  R4
00022f 2455      	CLR  R5
000230 01d2      	MOVW R26,R4
000231 c010      	RJMP _0x66
                 ; 0000 0134         else if(B == -1){ B = 0; num_printer(B); }
                 _0x50:
000232 940e 0350 	CALL SUBOPT_0x3
000234 f421      	BRNE _0x52
000235 2466      	CLR  R6
000236 2477      	CLR  R7
000237 01d3      	MOVW R26,R6
000238 c009      	RJMP _0x66
                 ; 0000 0135         else if(C == -1){ C = 0; num_printer(C); }
                 _0x52:
000239 940e 0355 	CALL SUBOPT_0x4
00023b f421      	BRNE _0x54
00023c 2488      	CLR  R8
00023d 2499      	CLR  R9
00023e 01d4      	MOVW R26,R8
00023f c002      	RJMP _0x66
                 ; 0000 0136         else{ num_printer(0); }
                 _0x54:
000240 e0a0      	LDI  R26,LOW(0)
000241 e0b0      	LDI  R27,0
                 _0x66:
000242 de2e      	RCALL _num_printer
                 ; 0000 0137       }
                 ; 0000 0138       delay_ms(10);
                 _0x4F:
000243 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 0139 
                 ; 0000 013A       if(PINB.3 == 1){
000245 9bb3      	SBIS 0x16,3
000246 c01b      	RJMP _0x56
                 ; 0000 013B         if(A != -1){ A = -1; }
000247 940e 034b 	CALL SUBOPT_0x2
000249 f019      	BREQ _0x57
00024a efef      	LDI  R30,LOW(65535)
00024b efff      	LDI  R31,HIGH(65535)
00024c 012f      	MOVW R4,R30
                 ; 0000 013C         if(B != -1){ B = -1; }
                 _0x57:
00024d 940e 0350 	CALL SUBOPT_0x3
00024f f019      	BREQ _0x58
000250 efef      	LDI  R30,LOW(65535)
000251 efff      	LDI  R31,HIGH(65535)
000252 013f      	MOVW R6,R30
                 ; 0000 013D         if(C != -1){ C = -1; }
                 _0x58:
000253 940e 0355 	CALL SUBOPT_0x4
000255 f019      	BREQ _0x59
000256 efef      	LDI  R30,LOW(65535)
000257 efff      	LDI  R31,HIGH(65535)
000258 014f      	MOVW R8,R30
                 ; 0000 013E         lcd_clear();
                 _0x59:
000259 940e 02c5 	CALL _lcd_clear
                 ; 0000 013F         counter = 0;
00025b e0e0      	LDI  R30,LOW(0)
00025c 93e0 0268 	STS  _counter,R30
00025e 93e0 0269 	STS  _counter+1,R30
                 ; 0000 0140         lcd_gotoxy(0,0);
000260 940e 0347 	CALL SUBOPT_0x1
                 ; 0000 0141       }
                 ; 0000 0142       delay_ms(10);
                 _0x56:
000262 940e 035a 	CALL SUBOPT_0x5
                 ; 0000 0143 
                 ; 0000 0144       }
000264 ce57      	RJMP _0x3
                 ; 0000 0145 
                 ; 0000 0146 }
                 _0x5A:
000265 cfff      	RJMP _0x5A
                 ; .FEND
                 
                 	.DSEG
                 _0x31:
000260           	.BYTE 0x6
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000266 93ba      	ST   -Y,R27
000267 93aa      	ST   -Y,R26
000268 91a9          ld   r26,y+
000269 91b9          ld   r27,y+
00026a 91e9          ld   r30,y+
00026b 91f9          ld   r31,y+
00026c 9630          adiw r30,0
00026d f42a          brpl __itoa0
00026e 95e0          com  r30
00026f 95f0          com  r31
000270 9631          adiw r30,1
000271 e26d          ldi  r22,'-'
000272 936d          st   x+,r22
                 __itoa0:
000273 94e8          clt
000274 e180          ldi  r24,low(10000)
000275 e297          ldi  r25,high(10000)
000276 d00d          rcall __itoa1
000277 ee88          ldi  r24,low(1000)
000278 e093          ldi  r25,high(1000)
000279 d00a          rcall __itoa1
00027a e684          ldi  r24,100
00027b 2799          clr  r25
00027c d007          rcall __itoa1
00027d e08a          ldi  r24,10
00027e d005          rcall __itoa1
00027f 2f6e          mov  r22,r30
000280 d010          rcall __itoa5
000281 2766          clr  r22
000282 936c          st   x,r22
000283 9508          ret
                 
                 __itoa1:
000284 2766          clr	 r22
                 __itoa2:
000285 17e8          cp   r30,r24
000286 07f9          cpc  r31,r25
000287 f020          brlo __itoa3
000288 9563          inc  r22
000289 1be8          sub  r30,r24
00028a 0bf9          sbc  r31,r25
00028b f7c9          brne __itoa2
                 __itoa3:
00028c 2366          tst  r22
00028d f411          brne __itoa4
00028e f016          brts __itoa5
00028f 9508          ret
                 __itoa4:
000290 9468          set
                 __itoa5:
000291 5d60          subi r22,-0x30
000292 936d          st   x+,r22
000293 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000294 93aa      	ST   -Y,R26
000295 b3e5      	IN   R30,0x15
000296 70ef      	ANDI R30,LOW(0xF)
000297 2fae      	MOV  R26,R30
000298 81e8      	LD   R30,Y
000299 7fe0      	ANDI R30,LOW(0xF0)
00029a 2bea      	OR   R30,R26
00029b bbe5      	OUT  0x15,R30
                +
00029c e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00029d 958a     +DEC R24
00029e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00029f 9aaa      	SBI  0x15,2
                +
0002a0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002a1 958a     +DEC R24
0002a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002a3 98aa      	CBI  0x15,2
                +
0002a4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002a5 958a     +DEC R24
0002a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002a7 c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002a8 93aa      	ST   -Y,R26
0002a9 81a8      	LD   R26,Y
0002aa dfe9      	RCALL __lcd_write_nibble_G101
0002ab 81e8          ld    r30,y
0002ac 95e2          swap  r30
0002ad 83e8          st    y,r30
0002ae 81a8      	LD   R26,Y
0002af dfe4      	RCALL __lcd_write_nibble_G101
                +
0002b0 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002b1 958a     +DEC R24
0002b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002b3 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002b4 93aa      	ST   -Y,R26
0002b5 81e8      	LD   R30,Y
0002b6 e0f0      	LDI  R31,0
0002b7 59e2      	SUBI R30,LOW(-__base_y_G101)
0002b8 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002b9 81e0      	LD   R30,Z
0002ba 81a9      	LDD  R26,Y+1
0002bb 0fae      	ADD  R26,R30
0002bc dfeb      	RCALL __lcd_write_data
0002bd 81e9      	LDD  R30,Y+1
0002be 93e0 0272 	STS  __lcd_x,R30
0002c0 81e8      	LD   R30,Y
0002c1 93e0 0273 	STS  __lcd_y,R30
                 _0x20A0002:
0002c3 9622      	ADIW R28,2
0002c4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002c5 e0a2      	LDI  R26,LOW(2)
0002c6 940e 036f 	CALL SUBOPT_0x8
0002c8 e0ac      	LDI  R26,LOW(12)
0002c9 dfde      	RCALL __lcd_write_data
0002ca e0a1      	LDI  R26,LOW(1)
0002cb 940e 036f 	CALL SUBOPT_0x8
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 93e0 0273 	STS  __lcd_y,R30
0002d0 93e0 0272 	STS  __lcd_x,R30
0002d2 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002d3 93aa      	ST   -Y,R26
0002d4 81a8      	LD   R26,Y
0002d5 30aa      	CPI  R26,LOW(0xA)
0002d6 f031      	BREQ _0x2020005
0002d7 91e0 0274 	LDS  R30,__lcd_maxx
0002d9 91a0 0272 	LDS  R26,__lcd_x
0002db 17ae      	CP   R26,R30
0002dc f060      	BRLO _0x2020004
                 _0x2020005:
0002dd e0e0      	LDI  R30,LOW(0)
0002de 93ea      	ST   -Y,R30
0002df 91a0 0273 	LDS  R26,__lcd_y
0002e1 5faf      	SUBI R26,-LOW(1)
0002e2 93a0 0273 	STS  __lcd_y,R26
0002e4 dfcf      	RCALL _lcd_gotoxy
0002e5 81a8      	LD   R26,Y
0002e6 30aa      	CPI  R26,LOW(0xA)
0002e7 f409      	BRNE _0x2020007
0002e8 c047      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
0002e9 91e0 0272 	LDS  R30,__lcd_x
0002eb 5fef      	SUBI R30,-LOW(1)
0002ec 93e0 0272 	STS  __lcd_x,R30
0002ee 9aa8      	SBI  0x15,0
0002ef 81a8      	LD   R26,Y
0002f0 dfb7      	RCALL __lcd_write_data
0002f1 98a8      	CBI  0x15,0
0002f2 c03d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002f3 93ba      	ST   -Y,R27
0002f4 93aa      	ST   -Y,R26
0002f5 931a      	ST   -Y,R17
                 _0x2020008:
0002f6 81a9      	LDD  R26,Y+1
0002f7 81ba      	LDD  R27,Y+1+1
0002f8 91ed      	LD   R30,X+
0002f9 83a9      	STD  Y+1,R26
0002fa 83ba      	STD  Y+1+1,R27
0002fb 2f1e      	MOV  R17,R30
0002fc 30e0      	CPI  R30,0
0002fd f019      	BREQ _0x202000A
0002fe 2fa1      	MOV  R26,R17
0002ff dfd3      	RCALL _lcd_putchar
000300 cff5      	RJMP _0x2020008
                 _0x202000A:
000301 8118      	LDD  R17,Y+0
000302 9623      	ADIW R28,3
000303 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000304 93aa      	ST   -Y,R26
000305 b3e4      	IN   R30,0x14
000306 6fe0      	ORI  R30,LOW(0xF0)
000307 bbe4      	OUT  0x14,R30
000308 9aa2      	SBI  0x14,2
000309 9aa0      	SBI  0x14,0
00030a 9aa1      	SBI  0x14,1
00030b 98aa      	CBI  0x15,2
00030c 98a8      	CBI  0x15,0
00030d 98a9      	CBI  0x15,1
00030e 81e8      	LD   R30,Y
00030f 93e0 0274 	STS  __lcd_maxx,R30
000311 58e0      	SUBI R30,-LOW(128)
                +
000312 93e0 0270+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000314 81e8      	LD   R30,Y
000315 54e0      	SUBI R30,-LOW(192)
                +
000316 93e0 0271+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000318 e1a4      	LDI  R26,LOW(20)
000319 e0b0      	LDI  R27,0
00031a 940e 037c 	CALL _delay_ms
00031c 940e 0375 	CALL SUBOPT_0x9
00031e 940e 0375 	CALL SUBOPT_0x9
000320 940e 0375 	CALL SUBOPT_0x9
000322 e2a0      	LDI  R26,LOW(32)
000323 df70      	RCALL __lcd_write_nibble_G101
                +
000324 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000325 958a     +DEC R24
000326 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000327 e2a8      	LDI  R26,LOW(40)
000328 df7f      	RCALL __lcd_write_data
000329 e0a4      	LDI  R26,LOW(4)
00032a df7d      	RCALL __lcd_write_data
00032b e8a5      	LDI  R26,LOW(133)
00032c df7b      	RCALL __lcd_write_data
00032d e0a6      	LDI  R26,LOW(6)
00032e df79      	RCALL __lcd_write_data
00032f df95      	RCALL _lcd_clear
                 _0x20A0001:
000330 9621      	ADIW R28,1
000331 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _nums:
000266           	.BYTE 0x1
                 _results:
000267           	.BYTE 0x1
                 _counter:
000268           	.BYTE 0x2
                 __seed_G100:
00026a           	.BYTE 0x4
                 __base_y_G101:
00026e           	.BYTE 0x4
                 __lcd_x:
000272           	.BYTE 0x1
                 __lcd_y:
000273           	.BYTE 0x1
                 __lcd_maxx:
000274           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:73 WORDS
                 SUBOPT_0x0:
000332 940e 02f3 	CALL _lcd_puts
000334 eea8      	LDI  R26,LOW(1000)
000335 e0b3      	LDI  R27,HIGH(1000)
000336 940e 037c 	CALL _delay_ms
000338 91e0 0268 	LDS  R30,_counter
00033a 91f0 0269 	LDS  R31,_counter+1
00033c 9632      	ADIW R30,2
00033d 93e0 0268 	STS  _counter,R30
00033f 93f0 0269 	STS  _counter+1,R31
000341 91e0 0268 	LDS  R30,_counter
000343 93ea      	ST   -Y,R30
000344 e0a0      	LDI  R26,LOW(0)
000345 940c 02b4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000347 93ea      	ST   -Y,R30
000348 e0a0      	LDI  R26,LOW(0)
000349 940c 02b4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
00034b efef      	LDI  R30,LOW(65535)
00034c efff      	LDI  R31,HIGH(65535)
00034d 15e4      	CP   R30,R4
00034e 05f5      	CPC  R31,R5
00034f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3:
000350 efef      	LDI  R30,LOW(65535)
000351 efff      	LDI  R31,HIGH(65535)
000352 15e6      	CP   R30,R6
000353 05f7      	CPC  R31,R7
000354 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4:
000355 efef      	LDI  R30,LOW(65535)
000356 efff      	LDI  R31,HIGH(65535)
000357 15e8      	CP   R30,R8
000358 05f9      	CPC  R31,R9
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x5:
00035a e0aa      	LDI  R26,LOW(10)
00035b e0b0      	LDI  R27,0
00035c 940c 037c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00035e 01f2      	MOVW R30,R4
00035f e0aa      	LDI  R26,LOW(10)
000360 e0b0      	LDI  R27,HIGH(10)
000361 940e 0392 	CALL __MULW12
000363 0de6      	ADD  R30,R6
000364 1df7      	ADC  R31,R7
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000366 92da      	ST   -Y,R13
000367 92ca      	ST   -Y,R12
000368 e6a7      	LDI  R26,LOW(_results)
000369 e0b2      	LDI  R27,HIGH(_results)
00036a 940e 0266 	CALL _itoa
00036c e6a7      	LDI  R26,LOW(_results)
00036d e0b2      	LDI  R27,HIGH(_results)
00036e cfc3      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00036f 940e 02a8 	CALL __lcd_write_data
000371 e0a3      	LDI  R26,LOW(3)
000372 e0b0      	LDI  R27,0
000373 940c 037c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000375 e3a0      	LDI  R26,LOW(48)
000376 940e 0294 	CALL __lcd_write_nibble_G101
                +
000378 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000379 958a     +DEC R24
00037a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00037b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00037c 9610      	adiw r26,0
00037d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00037e ef8a     +LDI R24 , LOW ( 0xFA )
00037f e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000380 9701     +SBIW R24 , 1
000381 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000382 95a8      	wdr
000383 9711      	sbiw r26,1
000384 f7c9      	brne __delay_ms0
                 __delay_ms1:
000385 9508      	ret
                 
                 __ANEGW1:
000386 95f1      	NEG  R31
000387 95e1      	NEG  R30
000388 40f0      	SBCI R31,0
000389 9508      	RET
                 
                 __MULW12U:
00038a 9ffa      	MUL  R31,R26
00038b 2df0      	MOV  R31,R0
00038c 9feb      	MUL  R30,R27
00038d 0df0      	ADD  R31,R0
00038e 9fea      	MUL  R30,R26
00038f 2de0      	MOV  R30,R0
000390 0df1      	ADD  R31,R1
000391 9508      	RET
                 
                 __MULW12:
000392 d004      	RCALL __CHKSIGNW
000393 dff6      	RCALL __MULW12U
000394 f40e      	BRTC __MULW121
000395 dff0      	RCALL __ANEGW1
                 __MULW121:
000396 9508      	RET
                 
                 __CHKSIGNW:
000397 94e8      	CLT
000398 fff7      	SBRS R31,7
000399 c002      	RJMP __CHKSW1
00039a dfeb      	RCALL __ANEGW1
00039b 9468      	SET
                 __CHKSW1:
00039c ffb7      	SBRS R27,7
00039d c006      	RJMP __CHKSW2
00039e 95a0      	COM  R26
00039f 95b0      	COM  R27
0003a0 9611      	ADIW R26,1
0003a1 f800      	BLD  R0,0
0003a2 9403      	INC  R0
0003a3 fa00      	BST  R0,0
                 __CHKSW2:
0003a4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :   2 r2 :   0 r3 :   0 r4 :  26 r5 :   3 r6 :  26 r7 :   4 
r8 :  25 r9 :   4 r10:   5 r11:   3 r12:   4 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:   8 r26: 101 r27:  33 r28:   4 r29:   1 r30: 217 r31:  68 
x  :   7 y  :  44 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  48 brpl  :   1 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  76 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :   5 cpi   :   3 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  27 ld    :  18 ldd   :   6 ldi   : 171 
lds   :  10 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   7 movw  :  73 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   1 out   :  48 pop   :   0 push  :   0 rcall :  32 ret   :  17 
reti  :   0 rjmp  :  57 rol   :   0 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :  14 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   2 sts   :  15 sub   :   3 subi  :   6 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074a   1814     52   1866   32768   5.7%
[.dseg] 0x000060 0x000275      0     21     21    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
